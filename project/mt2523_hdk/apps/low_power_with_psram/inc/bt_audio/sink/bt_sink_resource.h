/* Copyright Statement:
 *
 * (C) 2005-2016  MediaTek Inc. All rights reserved.
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. ("MediaTek") and/or its licensors.
 * Without the prior written permission of MediaTek and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 * You may only use, reproduce, modify, or distribute (as applicable) MediaTek Software
 * if you have agreed to and been bound by the applicable license agreement with
 * MediaTek ("License Agreement") and been granted explicit permission to do so within
 * the License Agreement ("Permitted User").  If you are not a Permitted User,
 * please cease any access or use of MediaTek Software immediately.
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT MEDIATEK SOFTWARE RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES
 * ARE PROVIDED TO RECEIVER ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 */

#ifndef BT_SINK_RESOURCE_H
#define BT_SINK_RESOURCE_H
#include <stdint.h>

#define __BT_SINK_DEBUG_INFO__
#define __BT_SINK_TRACE__
#define __BT_SINK_AUTO_POWER_SWITCH__
//#define __BT_SINK_SCO_LOOPBACK__
#define __BT_SINK_AUTO_DISCOVERABLE_ONCE__
//#define __BT_SINK_POWER_ON_RECONNECT__
#define __BT_SINK_HF_INIT_PARAMS_SWITCH__
#define __BT_SINK_WITH_PXP__
#ifndef WIN32
#define __BT_SINK_AM_SUPPORT__
#define __BT_SINK_NVDM_SUPPORT__
#endif /* WIN32 */

/*
 * BT Sink Status
 */
typedef int32_t bt_sink_status_t;
#define BT_SINK_STATUS_SUCCESS             0
#define BT_SINK_STATUS_FAIL               -1
#define BT_SINK_STATUS_PENDING            -2
#define BT_SINK_STATUS_INVALID_PARAM      -3
#define BT_SINK_STATUS_DB_NOT_FOUND       -4
#define BT_SINK_STATUS_EVENT_STOP         -5
#define BT_SINK_STATUS_NO_REQUEST         -6
#define BT_SINK_STATUS_LINK_EXIST         -7
#define BT_SINK_STATUS_MAX_LINK           -8
#define BT_SINK_STATUS_NEED_RETRY         -9
#define BT_SINK_STATUS_REQUEST_EXIST      -10
#define BT_SINK_STATUS_INVALID_STATUS     -11

/*
  * Timer ID
  */
#define BT_SINK_TIMER_BASE          0x01000000
#define BT_SINK_TIMER_CM_DISCOVERABLE (BT_SINK_TIMER_BASE + 1)
#define BT_SINK_TIMER_CM_REQUEST_DELAY (BT_SINK_TIMER_BASE + 2)
#define BT_SINK_TIMER_HF_AUDIO_DISC   (BT_SINK_TIMER_BASE + 11)
#define BT_SINK_TIMER_DUT_MODE   (BT_SINK_TIMER_BASE + 21)


/*
  * Event ID
  */
#define BT_SINK_EVENT_BASE          0x10000000

#define BT_SINK_EVENT_CM_RANGE      0x100
#define BT_SINK_EVENT_CM_START      BT_SINK_EVENT_BASE
#define BT_SINK_EVENT_CM_END        (BT_SINK_EVENT_CM_START + BT_SINK_EVENT_CM_RANGE - 1)

#define BT_SINK_EVENT_HF_RANGE      0x100
#define BT_SINK_EVENT_HF_START      (BT_SINK_EVENT_CM_END + 1)
#define BT_SINk_EVENT_HF_END        (BT_SINK_EVENT_HF_START + BT_SINK_EVENT_HF_RANGE - 1)

#define BT_SINK_EVENT_A2DP_RANGE    0x100
#define BT_SINK_EVENT_A2DP_START    (BT_SINk_EVENT_HF_END + 1)
#define BT_SINK_EVENT_A2DP_END      (BT_SINK_EVENT_A2DP_START + BT_SINK_EVENT_A2DP_RANGE - 1)

#define BT_SINK_EVENT_AVRCP_RANGE   0x100
#define BT_SINK_EVENT_AVRCP_START   (BT_SINK_EVENT_A2DP_END + 1)
#define BT_SINK_EVENT_AVRCP_END     (BT_SINK_EVENT_AVRCP_START + BT_SINK_EVENT_AVRCP_RANGE - 1)

#define BT_SINK_EVENT_PBAPC_RANGE   0x100
#define BT_SINK_EVENT_PBAPC_START   (BT_SINK_EVENT_AVRCP_END + 1)
#define BT_SINK_EVENT_PBAPC_END     (BT_SINK_EVENT_PBAPC_START + BT_SINK_EVENT_PBAPC_RANGE - 1)

#define BT_SINK_EVENT_USER_RANGE   0x100
#define BT_SINK_EVENT_USER_START   (BT_SINK_EVENT_PBAPC_END + 1)
#define BT_SINK_EVENT_USER_END     (BT_SINK_EVENT_USER_START + BT_SINK_EVENT_USER_RANGE - 1)

#define BT_SINK_EVENT_DUT_RANGE   0x10
#define BT_SINK_EVENT_DUT_START   (BT_SINK_EVENT_USER_END + 1)
#define BT_SINK_EVENT_DUT_END     (BT_SINK_EVENT_DUT_START + BT_SINK_EVENT_DUT_RANGE - 1)

#define BT_SINK_EVENT_EXTERN_BASE          0x20000000

#define BT_SINK_EVENT_EXTERN_PXP_RANGE 0x100
#define BT_SINK_EVENT_EXTERN_PXP_START BT_SINK_EVENT_EXTERN_BASE
#define BT_SINK_EVENT_EXTERN_PXP_END   (BT_SINK_EVENT_EXTERN_PXP_START + BT_SINK_EVENT_EXTERN_PXP_RANGE - 1)

typedef enum {
    BT_SINK_EVENT_CM_POWER_SWITCH = BT_SINK_EVENT_CM_START,
    BT_SINK_EVENT_CM_CONNECT,
    BT_SINK_EVENT_CM_DISCONNECT,
    BT_SINK_EVENT_CM_CONNECTABLE,
    BT_SINK_EVENT_CM_DISCOVERABLE,
    BT_SINK_EVENT_CM_PROFILE_INIT,
    BT_SINK_EVENT_CM_PROFILE_CONNECT_REQ,
    BT_SINK_EVENT_CM_PROFILE_CONNECT_IND,
    BT_SINK_EVENT_CM_PROFILE_DISCONNECT_REQ,
    BT_SINK_EVENT_CM_PROFILE_DEINIT,
    // SINK HF INDICATION
    BT_SINK_EVENT_HF_CONNECT_STATE_CHANGE = BT_SINK_EVENT_HF_START,
    BT_SINK_EVENT_HF_CALL_STATE_CHANGE,
    BT_SINK_EVENT_HF_CALL_STATE_CHANGE_SYNC,
    BT_SINK_EVENT_HF_AUDIO_STATE_CHANGE,
    BT_SINK_EVENT_HF_AUDIO_STATE_CHANGE_SYNC,
    BT_SINK_EVENT_HF_RING_TONE,
    BT_SINK_EVENT_HF_RING_TONE_SYNC,
    BT_SINK_EVENT_HF_CALLER_INFORMATION,
    BT_SINK_EVENT_HF_SPEAKER_VOLUME_CHANGE,
    // SINK HF REQUEST
    BT_SINK_EVENT_HF_ANSWER,
    BT_SINK_EVENT_HF_REJECT,
    BT_SINK_EVENT_HF_HANG_UP,
    BT_SINK_EVENT_HF_DIAL_LAST,
    BT_SINK_EVENT_HF_QUERY_CALL_LIST,
    BT_SINK_EVENT_HF_SWITCH_AUDIO_PATH,
    BT_SINK_EVENT_HF_3WAY_RELEASE_ALL_HELD,
    BT_SINK_EVENT_HF_3WAY_RELEASE_ACTIVE_ACCEPT_OTHER,
    BT_SINK_EVENT_HF_3WAY_RELEASE_SPECIAL,
    BT_SINK_EVENT_HF_3WAY_HOLD_ACTIVE_ACCEPT_OTHER,
    BT_SINK_EVENT_HF_3WAY_HOLD_SPECIAL,
    BT_SINK_EVENT_HF_3WAY_ADD_HELD_CALL_TO_CONVERSATION,
    BT_SINK_EVENT_HF_3WAY_EXPLICIT_CALL_TRANSFER,
    BT_SINK_EVENT_HF_VOICE_RECOGNITION_ACTIVATE,
    BT_SINK_EVENT_A2DP_CONNECT = BT_SINK_EVENT_A2DP_START,
    BT_SINK_EVENT_A2DP_DISCONNECT,
    BT_SINK_EVENT_A2DP_START_STREAMING,
    BT_SINK_EVENT_A2DP_SUSPEND_STREAMING,
    BT_SINK_EVENT_A2DP_RECONFIGURE,
    BT_SINK_EVENT_A2DP_NOTIFY,
    BT_SINK_EVENT_AVRCP_CONNECT = BT_SINK_EVENT_AVRCP_START,
    BT_SINK_EVENT_AVRCP_DISCONNECT,
    BT_SINK_EVENT_AVRCP_PLAY,
    BT_SINK_EVENT_AVRCP_PAUSE,
    BT_SINK_EVENT_AVRCP_NEXT_TRACK,
    BT_SINK_EVENT_AVRCP_PRE_TRACK,
    BT_SINK_EVENT_AVRCP_NOTIFY,

    BT_SINK_EVENT_VOLUME_UP = BT_SINK_EVENT_USER_START,
    BT_SINK_EVENT_VOLUME_DOWN,
    BT_SINK_EVENT_VOLUME_MAX,
    BT_SINK_EVENT_VOLUME_MIN,

    BT_SINK_EVENT_DUT_MODE = BT_SINK_EVENT_DUT_START,
    BT_SINK_EVENT_DUT_MODE_LOOP_BACK_ON = BT_SINK_EVENT_DUT_END,
    BT_SINK_EVENT_DUT_MODE_LOOP_BACK_OFF,

    BT_SINK_EVENT_EXTERN_PXP_DISCONNECT = BT_SINK_EVENT_EXTERN_PXP_START,
    BT_SINK_EVENT_EXTERN_PXP_CONNECT,
    BT_SINK_EVENT_EXTERN_PXP_ALERT,
    /* add new event before this line */
    BT_SINK_EVENT_ALL
} bt_sink_event_id_t;

#endif /* BT_SINK_RESOURCE_H */
